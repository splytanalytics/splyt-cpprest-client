/**
 * Knetik.io Data Collector REST API
 * <p>Use this API to send application data to Knetik.io including user/device information and transactional events.</p> <p>   Please consult the <a href=\"/doc\">official user documentation</a> to find out how to send data, and how this data is used. <p></p> <h2>Notes</h2> <br> New more ReSTful implementation of the telemetry data collection service. Legacy clients can still use the old API format, but we strongly recommend switching over to this new format. Navigate to the legacy documentation using the dropdown at the top of this page. <p></p> <h2>User IDs and Device IDs</h2> <br> Knetik.io can uniquely associate state, events and transactions to users and/or devices for your application. In order to accomplish this, each API call takes userId and deviceId as parameters in the request object. At least one of these must be provided in the request object, except as explicitly noted. <br> <p></p> <h2>Timestamps</h2> <br> All timestamp parameters must be epoch timestamps in milliseconds. <br> <p></p> <h2>Required Request Headers</h2> <br> The following HTTP header values must be provided for each API call: <ul>   <li>     <b>Content-Type: application/json</b>   </li> </ul> <p></p> <h2>Required Query Parameters</h2> <br> All API calls also require the following query parameters to be present on the URL: <ul>   <li>     <b>customer_id:</b> your unique customer ID   </li> </ul> <p></p> <h2>API Responses</h2> <br> If successful, API calls will simply return an HTTP response code of ACCEPTED (202) with no other data. If errors occur, a JSON payload will be returned containing detailed error information and an appropriate HTTP error status code will be provided (as documented in each of the API methods). <br> <p></p>
 *
 * OpenAPI spec version: 2.0
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NewEventRequest.h"

namespace io {
namespace knetik {
namespace client {
namespace model {

NewEventRequest::NewEventRequest()
{
    m_Category = U("");
    m_DeviceId = U("");
    m_DeviceIdIsSet = false;
    m_EventPropertiesIsSet = false;
    m_EventTimestamp = 0;
    m_RequestType = U("");
    m_Result = U("");
    m_SendTimestamp = 0;
    m_TransactionId = U("");
    m_TransactionIdIsSet = false;
    m_UserId = U("");
    m_UserIdIsSet = false;
    
}

NewEventRequest::~NewEventRequest()
{
}

void NewEventRequest::validate()
{
    // TODO: implement validation
}

web::json::value NewEventRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("category")] = ModelBase::toJson(m_Category);
    if(m_DeviceIdIsSet)
    {
        val[U("deviceId")] = ModelBase::toJson(m_DeviceId);
    }
    if(m_EventPropertiesIsSet)
    {
        val[U("eventProperties")] = ModelBase::toJson(m_EventProperties);
    }
    val[U("eventTimestamp")] = ModelBase::toJson(m_EventTimestamp);
    val[U("requestType")] = ModelBase::toJson(m_RequestType);
    val[U("result")] = ModelBase::toJson(m_Result);
    val[U("sendTimestamp")] = ModelBase::toJson(m_SendTimestamp);
    if(m_TransactionIdIsSet)
    {
        val[U("transactionId")] = ModelBase::toJson(m_TransactionId);
    }
    if(m_UserIdIsSet)
    {
        val[U("userId")] = ModelBase::toJson(m_UserId);
    }
    

    return val;
}

void NewEventRequest::fromJson(web::json::value& val)
{
    setCategory(ModelBase::stringFromJson(val[U("category")]));
    if(val.has_field(U("deviceId")))
    {
        setDeviceId(ModelBase::stringFromJson(val[U("deviceId")]));
        
    }
    if(val.has_field(U("eventProperties")))
    {
        if(!val[U("eventProperties")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("eventProperties")]);
            setEventProperties( newItem );
        }
        
    }
    setEventTimestamp(ModelBase::int64_tFromJson(val[U("eventTimestamp")]));
    setRequestType(ModelBase::stringFromJson(val[U("requestType")]));
    setResult(ModelBase::stringFromJson(val[U("result")]));
    setSendTimestamp(ModelBase::int64_tFromJson(val[U("sendTimestamp")]));
    if(val.has_field(U("transactionId")))
    {
        setTransactionId(ModelBase::stringFromJson(val[U("transactionId")]));
        
    }
    if(val.has_field(U("userId")))
    {
        setUserId(ModelBase::stringFromJson(val[U("userId")]));
        
    }
    
}

void NewEventRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("category"), m_Category));
    if(m_DeviceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("deviceId"), m_DeviceId));
        
    }
    if(m_EventPropertiesIsSet)
    {
        if (m_EventProperties.get())
        {
            m_EventProperties->toMultipart(multipart, U("eventProperties."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("eventTimestamp"), m_EventTimestamp));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("requestType"), m_RequestType));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("result"), m_Result));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("sendTimestamp"), m_SendTimestamp));
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("transactionId"), m_TransactionId));
        
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("userId"), m_UserId));
        
    }
    
}

void NewEventRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCategory(ModelBase::stringFromHttpContent(multipart->getContent(U("category"))));
    if(multipart->hasContent(U("deviceId")))
    {
        setDeviceId(ModelBase::stringFromHttpContent(multipart->getContent(U("deviceId"))));
        
    }
    if(multipart->hasContent(U("eventProperties")))
    {
        if(multipart->hasContent(U("eventProperties")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("eventProperties."));
            setEventProperties( newItem );
        }
        
    }
    setEventTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(U("eventTimestamp"))));
    setRequestType(ModelBase::stringFromHttpContent(multipart->getContent(U("requestType"))));
    setResult(ModelBase::stringFromHttpContent(multipart->getContent(U("result"))));
    setSendTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(U("sendTimestamp"))));
    if(multipart->hasContent(U("transactionId")))
    {
        setTransactionId(ModelBase::stringFromHttpContent(multipart->getContent(U("transactionId"))));
        
    }
    if(multipart->hasContent(U("userId")))
    {
        setUserId(ModelBase::stringFromHttpContent(multipart->getContent(U("userId"))));
        
    }
    
}


utility::string_t NewEventRequest::getCategory() const
{
    return m_Category;
}
void NewEventRequest::setCategory(utility::string_t value)
{
    m_Category = value;
    
}
utility::string_t NewEventRequest::getDeviceId() const
{
    return m_DeviceId;
}
void NewEventRequest::setDeviceId(utility::string_t value)
{
    m_DeviceId = value;
    m_DeviceIdIsSet = true;
}
bool NewEventRequest::deviceIdIsSet() const
{
    return m_DeviceIdIsSet;
}
void NewEventRequest::unsetDeviceId()
{
    m_DeviceIdIsSet = false;
}
std::shared_ptr<Object> NewEventRequest::getEventProperties() const
{
    return m_EventProperties;
}
void NewEventRequest::setEventProperties(std::shared_ptr<Object> value)
{
    m_EventProperties = value;
    m_EventPropertiesIsSet = true;
}
bool NewEventRequest::eventPropertiesIsSet() const
{
    return m_EventPropertiesIsSet;
}
void NewEventRequest::unsetEventProperties()
{
    m_EventPropertiesIsSet = false;
}
int64_t NewEventRequest::getEventTimestamp() const
{
    return m_EventTimestamp;
}
void NewEventRequest::setEventTimestamp(int64_t value)
{
    m_EventTimestamp = value;
    
}
utility::string_t NewEventRequest::getRequestType() const
{
    return m_RequestType;
}
void NewEventRequest::setRequestType(utility::string_t value)
{
    m_RequestType = value;
    
}
utility::string_t NewEventRequest::getResult() const
{
    return m_Result;
}
void NewEventRequest::setResult(utility::string_t value)
{
    m_Result = value;
    
}
int64_t NewEventRequest::getSendTimestamp() const
{
    return m_SendTimestamp;
}
void NewEventRequest::setSendTimestamp(int64_t value)
{
    m_SendTimestamp = value;
    
}
utility::string_t NewEventRequest::getTransactionId() const
{
    return m_TransactionId;
}
void NewEventRequest::setTransactionId(utility::string_t value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}
bool NewEventRequest::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}
void NewEventRequest::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
utility::string_t NewEventRequest::getUserId() const
{
    return m_UserId;
}
void NewEventRequest::setUserId(utility::string_t value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}
bool NewEventRequest::userIdIsSet() const
{
    return m_UserIdIsSet;
}
void NewEventRequest::unsetUserId()
{
    m_UserIdIsSet = false;
}

}
}
}
}

