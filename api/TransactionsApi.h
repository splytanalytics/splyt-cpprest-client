/**
 * Knetik.io Data Collector REST API
 * <p>Use this API to send application data to Knetik.io including user/device information and transactional events.</p> <p>   Please consult the <a href=\"/doc\">official user documentation</a> to find out how to send data, and how this data is used. <p></p> <h2>Notes</h2> <br> New more ReSTful implementation of the telemetry data collection service. Legacy clients can still use the old API format, but we strongly recommend switching over to this new format. Navigate to the legacy documentation using the dropdown at the top of this page. <p></p> <h2>User IDs and Device IDs</h2> <br> Knetik.io can uniquely associate state, events and transactions to users and/or devices for your application. In order to accomplish this, each API call takes userId and deviceId as parameters in the request object. At least one of these must be provided in the request object, except as explicitly noted. <br> <p></p> <h2>Timestamps</h2> <br> All timestamp parameters must be epoch timestamps in milliseconds. <br> <p></p> <h2>Required Request Headers</h2> <br> The following HTTP header values must be provided for each API call: <ul>   <li>     <b>Content-Type: application/json</b>   </li> </ul> <p></p> <h2>Required Query Parameters</h2> <br> All API calls also require the following query parameters to be present on the URL: <ul>   <li>     <b>customer_id:</b> your unique customer ID   </li> </ul> <p></p> <h2>API Responses</h2> <br> If successful, API calls will simply return an HTTP response code of ACCEPTED (202) with no other data. If errors occur, a JSON payload will be returned containing detailed error information and an appropriate HTTP error status code will be provided (as documented in each of the API methods). <br> <p></p>
 *
 * OpenAPI spec version: 2.0
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TransactionsApi.h
 *
 * 
 */

#ifndef TransactionsApi_H_
#define TransactionsApi_H_


#include "ApiClient.h"

#include "DataCollectorBeginTransactionRequest.h"
#include "DataCollectorEndTransactionRequest.h"
#include "DataCollectorUpdateCollectionRequest.h"
#include "DataCollectorUpdateTransactionRequest.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace knetik {
namespace client {
namespace api {

using namespace io::knetik::client::model;

class  TransactionsApi
{
public:
    TransactionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~TransactionsApi();
    /// <summary>
    /// Begins a new transaction
    /// </summary>
    /// <remarks>
    /// Use the event properties to describe the initial state of the transaction
    /// </remarks>
    /// <param name="customerId">customerId</param>/// <param name="request">Transaction initiation information (optional)</param>
    pplx::task<void> beginTransactionUsingPOST(utility::string_t customerId, std::shared_ptr<DataCollectorBeginTransactionRequest> request);
    /// <summary>
    /// Ends the transaction
    /// </summary>
    /// <remarks>
    /// Submits final transaction state to Knetik.io
    /// </remarks>
    /// <param name="id">Unique ID of the transaction being finalized</param>/// <param name="customerId">customerId</param>/// <param name="request">Transaction finalization information (optional)</param>
    pplx::task<void> endTransactionUsingPUT(utility::string_t id, utility::string_t customerId, std::shared_ptr<DataCollectorEndTransactionRequest> request);
    /// <summary>
    /// Creates and finalizes a collection of transaction information
    /// </summary>
    /// <remarks>
    /// This operation basically encapsulates beginTransaction and endTransaction semantics into a single step and is used to update user balance information in Knetik.io
    /// </remarks>
    /// <param name="customerId">customerId</param>/// <param name="request">Collection state information (optional)</param>
    pplx::task<void> updateCollectionUsingPOST(utility::string_t customerId, std::shared_ptr<DataCollectorUpdateCollectionRequest> request);
    /// <summary>
    /// Updates the progress for the given transaction
    /// </summary>
    /// <remarks>
    /// Use the event properties to update the state of the transaction
    /// </remarks>
    /// <param name="id">Unique ID of the transaction being updated</param>/// <param name="customerId">customerId</param>/// <param name="request">Transaction progress information (optional)</param>
    pplx::task<void> updateTransactionUsingPUT(utility::string_t id, utility::string_t customerId, std::shared_ptr<DataCollectorUpdateTransactionRequest> request);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* TransactionsApi_H_ */

